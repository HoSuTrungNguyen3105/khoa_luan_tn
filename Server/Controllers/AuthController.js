import UserModel from "../Models/userModel.js";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";
import crypto from "crypto";
import { generateToken } from "../lib/utils.js";
import cloudinary from "../lib/cloudinary.js";
import messageModel from "../Models/messageModel.js";
import nodemailer from "nodemailer";
import multer from "multer"; // S·ª≠ d·ª•ng multer ƒë·ªÉ x·ª≠ l√Ω file upload

export const dataRoute = async (req, res) => {
  const { role } = req.query;

  try {
    const users = await UserModel.find({ role }); // L·ªçc theo role
    res.json(users);
  } catch (error) {
    res.status(500).json({ message: "Error fetching data" });
  }
};

export const registerUser = async (req, res) => {
  const { username, password, firstname, lastname, email, badges } = req.body;

  try {
    const existingUser = await UserModel.findOne({ email });
    if (existingUser) {
      return res.status(400).json({ message: "T√†i kho·∫£n ƒë√£ t·ªìn t·∫°i" });
    }
    // // Validate email format (you can use a regular expression for this)
    // const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}$/;
    // if (!emailRegex.test(email)) {
    //   return res.status(400).json({ message: "Email kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng" });
    // }

    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(password, salt);

    const verificationCode = crypto
      .randomBytes(3)
      .toString("hex")
      .toUpperCase(); // M√£ 6 k√Ω t·ª±
    const verificationCodeExpires = new Date(Date.now() + 15 * 60 * 1000); // H·∫øt h·∫°n sau 15 ph√∫t
    const badgeId = badgeslist.some((b) => b.id === badges) ? badges : 578;

    const newUser = new UserModel({
      username,
      password: hashedPassword,
      email,
      firstname,
      lastname,
      verificationCode,
      verificationCodeExpires,
      badges: badgeId,
    });

    await newUser.save();

    // G·ª≠i m√£ x√°c th·ª±c qua email
    const transporter = nodemailer.createTransport({
      service: "gmail",
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS,
      },
    });

    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: email,
      subject: "üîê X√°c th·ª±c t√†i kho·∫£n c·ªßa b·∫°n",
      html: `
        <div style="font-family: Arial, sans-serif; padding: 20px; background-color: #f9f9f9;">
          <div style="max-width: 500px; margin: auto; background: #ffffff; padding: 20px; border-radius: 8px; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);">
            <h2 style="color: #333; text-align: center;">üîë X√°c th·ª±c t√†i kho·∫£n</h2>
            <p style="font-size: 16px; color: #555;">Ch√†o b·∫°n,</p>
            <p style="font-size: 16px; color: #555;">
              M√£ x√°c th·ª±c c·ªßa b·∫°n l√†: <strong style="color: #d9534f; font-size: 18px;">${verificationCode}</strong>
            </p>
            <p style="font-size: 14px; color: #777;">
              M√£ n√†y c√≥ hi·ªáu l·ª±c trong <strong>15 ph√∫t</strong>. Vui l√≤ng kh√¥ng chia s·∫ª m√£ n√†y v·ªõi b·∫•t k·ª≥ ai.
            </p>
            <p style="font-size: 12px; color: #999; text-align: center; margin-top: 20px;">
              N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu x√°c th·ª±c, vui l√≤ng b·ªè qua email n√†y.
            </p>
          </div>
        </div>
      `,
    };

    await transporter.sendMail(mailOptions);

    res.status(201).json({
      message: "T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c t·∫°o. Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ x√°c th·ª±c.",
    });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};
// badges.js
export const badgeslist = [
  { id: 646, name: "Vip" },
  { id: 111, name: "Th∆∞·ªùng d√¢n" },
  { id: 323, name: "Ng√¥i sao ƒëang l√™n" },
  { id: 278, name: "T∆∞∆°ng t√°c cao" },
  { id: 578, name: "Th√†nh vi√™n m·ªõi" },
  { id: 696, name: "m·∫•t ƒë·ªì nhi·ªÅu nh·∫•t" },
  { id: 624, name: "Th√†nh vi√™n ƒë·ªìng" },
  { id: 684, name: "Th√†nh vi√™n b·∫°c" },
  { id: 612, name: "Th√†nh vi√™n v√†ng" },
  { id: 999, name: "Th√†nh vi√™n kim c∆∞∆°ng" },
];

export const loginUser = async (req, res) => {
  const { email, password, isAdminLogin } = req.body;

  try {
    // Ki·ªÉm tra n·∫øu thi·∫øu th√¥ng tin ƒë·∫ßu v√†o
    if (!email || !password) {
      return res.status(400).json({
        message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin t√†i kho·∫£n v√† m·∫≠t kh·∫©u!",
      });
    }

    // T√¨m ki·∫øm ng∆∞·ªùi d√πng trong c∆° s·ªü d·ªØ li·ªáu
    const user = await UserModel.findOne({ email });

    // Ki·ªÉm tra n·∫øu t√†i kho·∫£n kh√¥ng t·ªìn t·∫°i
    if (!user) {
      return res.status(400).json({ message: "T√†i kho·∫£n ch∆∞a ƒëƒÉng k√Ω!" });
    }

    // Ki·ªÉm tra tr·∫°ng th√°i b·ªã kh√≥a
    if (user.isBlocked) {
      const now = new Date();
      if (user.blockExpires && now < user.blockExpires) {
        const remainingMinutes = Math.ceil((user.blockExpires - now) / 60000);
        return res.status(403).json({
          message: `T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã kh√≥a. Vui l√≤ng th·ª≠ l·∫°i sau ${remainingMinutes} ph√∫t.`,
        });
      } else {
        // M·ªü kh√≥a t√†i kho·∫£n n·∫øu h·∫øt th·ªùi gian kh√≥a
        user.isBlocked = false;
        user.loginAttempts = 0;
        user.blockExpires = null;
        await user.save();
      }
    }

    // Ki·ªÉm tra vai tr√≤ ƒëƒÉng nh·∫≠p
    if (isAdminLogin) {
      // Y√™u c·∫ßu vai tr√≤ admin
      if (user.role !== "admin") {
        return res.status(403).json({
          message: "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p Admin ho·∫∑c kh√¥ng ph·∫£i Admin.",
        });
      }
    } else {
      // Ng∆∞·ªùi d√πng kh√¥ng ph·∫£i admin kh√¥ng th·ªÉ ƒëƒÉng nh·∫≠p qua admin-login
      if (user.role === "admin") {
        return res.status(403).json({
          message: "Vui l√≤ng truy c·∫≠p trang ƒëƒÉng nh·∫≠p Admin ƒë·ªÉ ƒëƒÉng nh·∫≠p.",
        });
      }
    }
    // Ki·ªÉm tra m·∫≠t kh·∫©u
    const isPasswordCorrect = await bcrypt.compare(password, user.password);
    if (!isPasswordCorrect) {
      user.loginAttempts += 1;

      // Kh√≥a t√†i kho·∫£n sau 3 l·∫ßn nh·∫≠p sai
      if (user.loginAttempts >= 3) {
        user.isBlocked = true;
        user.blockExpires = new Date(Date.now() + 15 * 60 * 1000); // Kh√≥a trong 15 ph√∫t
      }

      await user.save();
      return res.status(400).json({
        message: `Sai m·∫≠t kh·∫©u! B·∫°n ƒë√£ nh·∫≠p sai ${user.loginAttempts} l·∫ßn.`,
      });
    }

    // Reset s·ªë l·∫ßn ƒëƒÉng nh·∫≠p sai n·∫øu th√†nh c√¥ng
    user.loginAttempts = 0;
    user.isBlocked = false;
    user.blockExpires = null;
    user.lastLogin = Date.now();

    // T·∫°o token ƒëƒÉng nh·∫≠p v√† tr·∫£ v·ªÅ th√¥ng tin ng∆∞·ªùi d√πng
    generateToken(user._id, res);
    res.status(200).json(user);
  } catch (error) {
    console.error("Error in login controller:", error.message);
    res
      .status(500)
      .json({ message: "ƒê√£ x·∫£y ra l·ªói tr√™n m√°y ch·ªß. Vui l√≤ng th·ª≠ l·∫°i sau." });
  }
};

export const checkUserStatus = async (req, res) => {
  try {
    const userId = req.user.id; // L·∫•y userId t·ª´ token (middleware auth)
    const user = await UserModel.findById(userId);

    if (!user) {
      return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });
    }

    if (user.isBlocked) {
      return res.status(403).json({ message: "T√†i kho·∫£n ƒë√£ b·ªã kh√≥a" });
    }

    res.status(200).json({ message: "T√†i kho·∫£n h·ª£p l·ªá" });
  } catch (error) {
    console.error("Error in checking user status:", error.message);
    res.status(500).json({ message: "L·ªói server" });
  }
};
export const forgetPassword = async (req, res) => {
  const { email } = req.body;
  try {
    const user = await UserModel.findOne({ email });
    if (!user) {
      return res.json({ message: "T√†i kho·∫£n ch∆∞a ƒëƒÉng k√Ω" });
    }
    const token = jwt.sign({ id: user._id }, process.env.JWT_KEY, {
      expiresIn: "1h",
    });
    // Add your logic for password reset here (e.g., sending a reset link)
    var transporter = nodemailer.createTransport({
      service: "gmail",
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS,
      },
    });

    var mailOptions = {
      from: "trungnguyenhs3105@gmail.com",
      to: email,
      subject: "G·ª≠i token ƒë·ªÉ ƒë·∫∑t l·∫°i m√£",
      html: `
        <p>Ch√∫ng t√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u c·ªßa b·∫°n. ƒê·ªÉ thay ƒë·ªïi m·∫≠t kh·∫©u, vui l√≤ng b·∫•m v√†o n√∫t d∆∞·ªõi ƒë√¢y:</p>
        <a href="${FRONTEND_URL}/reset-password/${token}" 
           style="display:inline-block; padding: 10px 20px; background-color: #007bff; color: white; text-align: center; text-decoration: none; border-radius: 5px;">
           B·∫•m v√†o ƒë·ªÉ thay ƒë·ªïi m·∫≠t kh·∫©u
        </a>
        <p>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu thay ƒë·ªïi m·∫≠t kh·∫©u, vui l√≤ng b·ªè qua email n√†y.</p>
      `,
    };

    transporter.sendMail(mailOptions, function (error, info) {
      if (error) {
        console.log(error);
      } else {
        console.log("Email sent: " + info.response);
      }
    });
  } catch (err) {
    console.log(err);
    res.status(500).json({ message: "Internal server error" });
  }
};
export const verifyEmail = async (req, res) => {
  const { email, verificationCode } = req.body;

  try {
    const user = await UserModel.findOne({ email });

    if (!user) {
      return res.status(400).json({ message: "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i" });
    }

    if (user.isVerified) {
      return res.status(400).json({ message: "T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c" });
    }

    if (
      user.verificationCode !== verificationCode ||
      user.verificationCodeExpires < new Date()
    ) {
      return res
        .status(400)
        .json({ message: "M√£ x√°c th·ª±c kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n" });
    }

    user.isVerified = true;
    user.verificationCode = undefined;
    user.verificationCodeExpires = undefined;

    await user.save();

    res.status(200).json({ message: "X√°c th·ª±c t√†i kho·∫£n th√†nh c√¥ng!" });
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
};

export const resetPasswordFromForget = async (req, res) => {
  const { token } = req.params;
  const { password } = req.body;
  try {
    const decoded = await jwt.verify(token, process.env.JWT_KEY);
    const id = decoded.id;
    const hashPassword = await bcrypt.hash(password, 10);
    await UserModel.findByIdAndUpdate({ _id: id }, { password: hashPassword });
    return res.json({ status: true, message: "Updated password success" });
  } catch (err) {
    return res.json("Token ko h·ª£p l·ªá");
  }
};
export const resetPassword = async (req, res) => {
  const { token } = req.params;
  const { oldPassword, newPassword, confirmPassword } = req.body;

  try {
    // Ki·ªÉm tra n·∫øu token h·ª£p l·ªá
    const decoded = jwt.verify(token, process.env.JWT_KEY);
    const userId = decoded.id;

    // Ki·ªÉm tra ng∆∞·ªùi d√πng
    const user = await UserModel.findById(userId);
    if (!user) {
      return res.status(404).json({ error: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!" });
    }

    // X√°c th·ª±c: Tr∆∞·ªùng n√†o b·ªã ƒë·ªÉ tr·ªëng?
    if (!oldPassword || !newPassword || !confirmPassword) {
      return res
        .status(400)
        .json({ error: "Vui l√≤ng ƒëi·ªÅn t·∫•t c·∫£ c√°c tr∆∞·ªùng th√¥ng tin!" });
    }

    // X√°c th·ª±c: M·∫≠t kh·∫©u c≈© c√≥ ƒë√∫ng kh√¥ng?
    const isOldPasswordCorrect = await bcrypt.compare(
      oldPassword,
      user.password
    );
    if (!isOldPasswordCorrect) {
      return res.status(400).json({ error: "M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng!" });
    }

    // M√£ h√≥a m·∫≠t kh·∫©u m·ªõi v√† c·∫≠p nh·∫≠t
    const hashedPassword = await bcrypt.hash(newPassword, 10);
    await UserModel.findByIdAndUpdate(userId, { password: hashedPassword });

    return res.status(200).json({ message: "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!" });
  } catch (error) {
    console.error("L·ªói trong qu√° tr√¨nh resetPassword:", error);
    return res
      .status(500)
      .json({ error: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!" });
  }
};
export const emailUser = async (req, res) => {
  try {
    const users = await UserModel.find({}, "email"); // Truy v·∫•n MongoDB
    res.json(users.map((user) => user.email));
  } catch (error) {
    console.error("L·ªói khi l·∫•y email:", error);
    res.status(500).json({ error: "L·ªói khi l·∫•y danh s√°ch email" });
  }
};
// C·∫•u h√¨nh email
const transporter = nodemailer.createTransport({
  service: "gmail",
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS,
  },
});
export const sendEmails = async (req, res) => {
  const { emails, subject, message } = req.body; // L·∫•y d·ªØ li·ªáu t·ª´ request

  if (!emails || !emails.length) {
    return res
      .status(400)
      .json({ error: "Danh s√°ch email kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng" });
  }

  try {
    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: emails.join(","), // G·ª≠i ƒë·∫øn nhi·ªÅu email c√πng l√∫c
      subject: subject,
      text: message,
    };

    await transporter.sendMail(mailOptions);
    res.json({ success: "Email ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!" });
  } catch (error) {
    console.error("L·ªói g·ª≠i email:", error);
    res.status(500).json({ error: "L·ªói khi g·ª≠i email" });
  }
};
// export const updateusser = async (req, res) => {
//   const { email, contact } = req.body;
//   const userId = req.user._id;
//   try {
//     const user = await UserModel.findOne({ email });
//     if (!user) {
//       return res.status(400).json({ error: "User not found" });
//     }
//     // C·∫≠p nh·∫≠t th√¥ng tin li√™n l·∫°c c·ªßa user
//     user.contact = contact;
//     await user.save();
//   } catch (err) {
//     console.log(err);
//   }
// };
// export const updatePassword = async (req, res) => {
//   const { oldPassword, newPassword, confirmPassword } = req.body;
//   const userId = req.user._id;
//   try {
//     const user = await UserModel.findById(userId);
//     if (!user) {
//       return res.status(400).json({ error: "User not found" });
//     }
//     // Ki·ªÉm tra m·∫≠t kh·∫©u c≈©
//     const isOldPasswordCorrect = await bcrypt.compare(
//       oldPassword,
//       user.password
//     );
//     if (!isOldPasswordCorrect) {
//       return res.status(400).json({ error: "Old password is incorrect" });
//     }
//     // Ki·ªÉm tra m·∫≠t kh·∫©u m·ªõi v√† x√°c nh·∫≠n m·∫≠t kh·∫©u
//     if (newPassword !== confirmPassword) {
//       return res
//         .status(400)
//         .json({ error: "New password and confirm password do not match" });
//     }
//     // M√£ h√≥a m·∫≠t kh·∫©u m·ªõi
//     const salt = await bcrypt.genSalt(10);
//     const hashedPassword = await bcrypt.hash(newPassword, salt);
//     // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi
//     user.password = hashedPassword;
//     await user.save();
//     res.status(200).json({ message: "Password updated successfully" });
//   } catch (error) {
//     console.error("Error in updatePassword controller:", error.message);
//     res.status(500).json({ message: "Internal Server Error" });
//   }
// };
export const logoutUser = async (req, res) => {
  try {
    res.cookie("jwt", "", {
      maxAge: 0,
      httpOnly: true,
      secure: true,
      sameSite: "None",
    }); // Ensure cookies are properly cleared
    res.status(200).json({ message: "ƒêƒÉng xu·∫•t th√†nh c√¥ng" });
  } catch (error) {
    console.log("Error in logout controller", error.message);
    res.status(500).json({ message: "Internal Server Error" });
  }
};
export const deleteAccount = async (req, res) => {
  try {
    const userId = req.user._id; // ID c·ªßa user ƒëƒÉng nh·∫≠p ƒë∆∞·ª£c l·∫•y t·ª´ middleware authMiddleware

    // X√≥a t√†i kho·∫£n kh·ªèi database
    const deletedUser = await UserModel.findByIdAndDelete(userId);

    if (!deletedUser) {
      return res.status(404).json({ message: "User not found" });
    }
    // X√≥a t·∫•t c·∫£ c√°c ƒëo·∫°n chat li√™n quan ƒë·∫øn user
    await messageModel.deleteMany({
      $or: [{ senderId: userId }, { receiverId: userId }],
    });

    // X√≥a cookie (logout)
    res.cookie("jwt", "", { maxAge: 0 });

    res.status(200).json({ message: "T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c x√≥a !!!" });
  } catch (error) {
    console.log("Error in deleteAccount controller:", error.message);
    res.status(500).json({ message: "Internal Server Error" });
  }
};

export const authUser = async (req, res) => {
  try {
    const userId = req.headers["id"] || req.headers["x-id"]; // Ki·ªÉm tra header
    console.log("Received user ID:", userId);
    // L·∫•y token t·ª´ header 'Authorization'
    const token = req.headers.authorization?.split(" ")[1]; // L·∫•y token sau "Bearer"

    if (!token) {
      return res.status(400).json({ message: "Token kh√¥ng t·ªìn t·∫°i" });
    }

    // Gi·∫£i m√£ token ƒë·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng
    const decoded = jwt.verify(token, "lostnfound"); // ƒê·∫£m b·∫£o key "lostnfound" ƒë√∫ng v·ªõi key ƒë√£ s·ª≠ d·ª•ng ƒë·ªÉ m√£ h√≥a token
    const username = decoded.authClaims[0].name; // Gi·∫£ s·ª≠ t√™n ng∆∞·ªùi d√πng l∆∞u trong authClaims

    // T√¨m ng∆∞·ªùi d√πng theo t√™n ng∆∞·ªùi d√πng (username), kh√¥ng ph·∫£i theo _id
    const user = await UserModel.findOne({ username: username });
    if (!user) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
    }

    return res.status(200).json(user); // Tr·∫£ v·ªÅ th√¥ng tin ng∆∞·ªùi d√πng
  } catch (error) {
    console.error("L·ªói khi x√°c th·ª±c ng∆∞·ªùi d√πng:", error);
    return res
      .status(500)
      .json({ message: "L·ªói server", error: error.message });
  }
};

export const updateProfile = async (req, res) => {
  try {
    const { profilePic } = req.body;
    const userId = req.user._id;

    if (!profilePic) {
      return res.status(400).json({ message: "Profile pic is required" });
    }

    const uploadResponse = await cloudinary.uploader.upload(profilePic);
    const updatedUser = await UserModel.findByIdAndUpdate(
      userId,
      { profilePic: uploadResponse.secure_url },
      { new: true }
    );

    res.status(200).json(updatedUser);
  } catch (error) {
    console.log("error in update profile:", error);
    res.status(500).json({ message: "Internal server error" });
  }
};
// C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
export const updateUserInfo = async (req, res) => {
  try {
    const { username, firstname, lastname, email, contact } = req.body;
    const userId = req.user._id;

    // Ki·ªÉm tra xem c√≥ √≠t nh·∫•t m·ªôt tr∆∞·ªùng c·∫ßn c·∫≠p nh·∫≠t kh√¥ng
    if (!username && !firstname && !lastname && !email) {
      return res.status(400).json({ message: "Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ c·∫≠p nh·∫≠t" });
    }

    // Ki·ªÉm tra ƒë·ªãnh d·∫°ng email
    if (email) {
      const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}$/;
      if (!emailRegex.test(email)) {
        return res.status(400).json({ message: "Email kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng" });
      }

      // Ki·ªÉm tra xem email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi user kh√°c ch∆∞a
      const existingEmailUser = await UserModel.findOne({
        email,
        _id: { $ne: userId },
      });
      if (existingEmailUser) {
        return res.status(400).json({ message: "Email n√†y ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng" });
      }
    }

    // C·∫≠p nh·∫≠t th√¥ng tin user
    const updatedUser = await UserModel.findByIdAndUpdate(
      userId,
      { username, firstname, lastname, email, contact },
      {
        new: true,
        runValidators: true,
        select: "username firstname lastname email",
      } // Ch·ªâ tr·∫£ v·ªÅ c√°c tr∆∞·ªùng c·∫ßn thi·∫øt
    );

    if (!updatedUser) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
    }

    res.status(200).json({
      message: "C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng",
      user: updatedUser,
    });
  } catch (error) {
    console.error("L·ªói c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng:", error);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß, vui l√≤ng th·ª≠ l·∫°i sau" });
  }
};
